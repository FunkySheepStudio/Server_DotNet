@using System.Net.WebSockets
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div>
    @if (uri != null && !isAuth)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Lightning network authentication</h5>
                <Server_Dotnet.Pages.Shared.Components.QrCode data="@uri?.ToString()" />
                <br>
                <a class="btn btn-link" href="@uri?.ToString()" role="button">Open in wallet</a>
            </div>
        </div>
    }
    else if (isAuth)
    {
        <Server_Dotnet.Pages.Menu.Component/>
    }
</div>


@code {
    [Parameter]
    public EventCallback<Messages.Message> SendWsMessage { get; set; }

    Uri? uri { get; set; }
    bool isAuth = false;

    protected Task Send()
    {
        var message = new Messages.Message("Auth", "GetId");
        return SendWsMessage.InvokeAsync(message);
    }

    public void OnWsMessage(Messages.Message message)
    {

        if (message.GetString("Controller") == "Socket" && message.GetString("Method") == "SetId")
        {
            string SocketID = message.GetString("ConnectionId");
            ProtectedSessionStore.SetAsync("SocketID", SocketID);
        }
        else if (message.GetString("Controller") == "Auth" && message.GetString("Method") == "SetUrl")
        {
            uri = new Uri(message.GetString("Url"));
            StateHasChanged();
        }
        else if (message.GetString("Controller") == "Auth" && message.GetString("Method") == "AuthOk")
        {
            isAuth = true;
            StateHasChanged();
        }
    }
}
