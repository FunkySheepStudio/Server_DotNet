@page "/"
@using System.Net.WebSockets
@using System.Text
@using System.Threading
@using System.Buffers;
@using System.Text.Json;
@implements IDisposable

<div>
    <p hidden="@IsConnected()">
        <pre>Disconnected</pre>
    </p>
    <p hidden="@IsDisconnected()">
        <Server_Dotnet.Pages.Auth.Component SendWsMessage="@Send" @ref="Auth"/>
        <pre>@log</pre>
    </p>
</div>

@code {
    Server_Dotnet.Pages.Auth.Component? Auth;
    string log = "";
    ClientWebSocket webSocket = new ClientWebSocket();
    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        await webSocket.ConnectAsync(new Uri("ws://localhost/ws"), disposalTokenSource.Token);
        _ = Listen();
    }

    private async Task Listen()
    {
        using IMemoryOwner<byte> memory = MemoryPool<byte>.Shared.Rent(1024 * 4);
        var request = await webSocket.ReceiveAsync(
            memory.Memory, CancellationToken.None);

        while (request.MessageType != WebSocketMessageType.Close)
        {
            switch (request.MessageType)
            {
                case WebSocketMessageType.Text:
                    string msg = Encoding.UTF8.GetString(memory.Memory.Span.Slice(0, request.Count));
                    log += $"Received: {msg}\n";

                    JsonDocument jsonDocument = JsonDocument.Parse(msg);
                    Messages.Message message = new(jsonDocument);

                    Auth?.OnWsMessage(message);
                    StateHasChanged();
                    break;
                default:
                    break;
            }

            request = await webSocket.ReceiveAsync(
            memory.Memory, CancellationToken.None);
        }

        await webSocket.CloseAsync(
            WebSocketCloseStatus.NormalClosure,
            "Closing",
            CancellationToken.None);
    }

    async Task Send(Messages.Message message)
    {
        log += $"Sending: {message.ToJSON()}\n";
        var dataToSend = new ArraySegment<byte>(Encoding.UTF8.GetBytes(message.ToJSON()));
        await webSocket.SendAsync(dataToSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
    }

    public bool IsConnected()
    {
        return webSocket.State == WebSocketState.Open;
    }

    public bool IsDisconnected()
    {
        return webSocket.State != WebSocketState.Open;
    }

    public void Dispose()
    {
        disposalTokenSource.Cancel();
        _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }
}